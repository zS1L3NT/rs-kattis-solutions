use std::io::BufRead;

fn get_inputs() -> Vec<String> {
    std::io::stdin()
        .lock()
        .lines()
        .map(|l| l.unwrap())
        .collect()
}

#[allow(dead_code)]
fn main() {
    let answers = std::collections::HashMap::from([
        (256, "4 * 4 * 4 * 4"),
        (68, "4 * 4 * 4 + 4"),
        (60, "4 * 4 * 4 - 4"),
        (16, "4 * 4 * 4 / 4"),
        (32, "4 * 4 + 4 * 4"),
        (24, "4 * 4 + 4 + 4"),
        (17, "4 * 4 + 4 / 4"),
        (0, "4 * 4 - 4 * 4"),
        (8, "4 * 4 - 4 - 4"),
        (15, "4 * 4 - 4 / 4"),
        (1, "4 * 4 / 4 * 4"),
        (-3, "4 * 4 / 4 - 4"),
        (5, "4 + 4 * 4 / 4"),
        (9, "4 + 4 + 4 / 4"),
        (-8, "4 + 4 - 4 * 4"),
        (7, "4 + 4 - 4 / 4"),
        (4, "4 + 4 / 4 / 4"),
        (-60, "4 - 4 * 4 * 4"),
        (-16, "4 - 4 * 4 - 4"),
        (-1, "4 - 4 - 4 / 4"),
        (2, "4 / 4 + 4 / 4"),
        (-15, "4 / 4 - 4 * 4"),
        (-7, "4 / 4 - 4 - 4"),
        (-4, "4 / 4 / 4 - 4"),
    ]);

    for input in get_inputs().iter().skip(1).map(|n| n.parse::<i32>().unwrap()) {
        
    }
}